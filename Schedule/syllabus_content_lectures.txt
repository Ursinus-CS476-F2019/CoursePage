SECTION
<a name = "primitives">Geometric Primitives</a>
The course will start with an overview of some important mathematical concepts from linear algebra and vector geometry to get everyone on the same page.  These are the basic building blocks that will be used again and again in the rest of the course.  The pace at which we go through this section will adapt to the background knowledge of the students.  We will have two small individual programming assignments in this section to get everyone used to programming with geometry in Javascript.<p><b>Big Concepts And Questions:</b><ul><li>What is numerical geometry?</li><li>How does the quadratic formulat help is with ray object intersections?</li><li>What trick can we use to incorporate both linear operations and translations into a single matrix?  Why do we want to do this?</li></ul></p>

LECTURE
Course Sneak Preview, Beginning Vectors
1_Intro/Lecture1_IntroToGraphics.pdf
<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> Chapter 1<!--<BR><a href = "Lectures/Intro/FirstDayQuiz">Background knowledge assessment</a>!-->
LECTURE
Vectors, Dot Products, Javascript Crash Course
2_VectorsIntro
Math Resources:<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 2.3, 2.4</li><li><a href = "https://www.youtube.com/watch?v=Jes5jwLl1q8&list=PL8erL0pXF3JYm7VaTdKDaWc8Q3FuP8Sa7">Calculus Blue</a> 4.1 - 4.3, 5.1 - 5.3, 6.1 - 6.3</li></ul>Javascript Resources<ul><li><a href = "http://www.cs.princeton.edu/courses/archive/spring19/cos426/precepts/01-precept.pdf">Princeton Javascript for Graphics Crash Course</a></li><li><a href = "https://developer.mozilla.org/en-US/docs/Web/JavaScript">Mozilla Javascript tutorial</a></li><li><a href = "http://www.json.org/">http://www.json.org/</a></li><li><a href = "http://glmatrix.net/docs/">glMatrix library documentation</a></li><li><a href = "https://google.github.io/styleguide/jsguide.html">Google Javascript Style Guide</a> (for what it's worth)</li></ul>
LECTURE
Projection, Normals, Lines, And Planes

<a href = "https://www.youtube.com/watch?v=a06KMRNe6V4">Calculus Blue Parameterized Lines in 3D</a>
LECTURE
Ray/Sphere Intersections

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 4.4.1
LECTURE
Barycentric Coordinates, Triangle Interior Point Testing, Begin 2D Matrix Transformations

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 2.7</li><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 6.1 - 6.4 (skip SVD)</li><li><a href = "../Materials/MatrixTransformations">Prof. Tralie's 2D Matrix Transformation Demo Widget</a></li></ul>
LECTURE
Homogenous Coordinates, Composition of Transformations, Inverses

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 6.1-6.4</li><li><a href = "https://ncase.me/matrix/">2D Homogenous Coordinates Reactive Demo</a></li></ul>
SECTION
<a name = "rendering">3D Rendering</a>
In this part of the course, we discuss how to use a computer to generate images of 3D geometric scenes, a process known as "3D rendering."  The ultimate goal of such techniques is to make photorealistic images that look like what a camera might take in the real world, though, as we will see, this is quite challenging.  In the process of attempting to meet this goal, we will think about how light bounces around in the real world and how humans see that light, and we will discuss algorithms that attempt to mimic this.  To this end, students will start off implementing a <a href = "https://en.wikipedia.org/wiki/Ray_tracing_(graphics)">ray tracer</a>, which is a non-realtime rendering technique, but which allows for visually stunning effects with reflection, refraction, and shadows.  We will then talk about the more traditional rendering pipeline, which leads to visually inferior but interactive images.  Students will learn the basics of the <a href = "https://en.wikipedia.org/wiki/WebGL">WebGL</a> / <a href = "https://en.wikipedia.org/wiki/OpenGL_Shading_Language">GLSL</a> Javascript API, which implements this rendering pipeline.<p><b>Big Concepts And Questions:</b><ul><li>What are local coordinates, and what are world coordinates?</li><li>What are we modeling in a "scene" of 3D geometry?</li><li>What kinds of visual effects emerge as light bounces around?</li><li>What can be accomplished with ray tracing that's difficult to accomplish with real time rendering pipelines?</li><li>What kinds of approximations make WebGL rendering fast?</li><li>What challenges emerge in virtual reality compared to monocular rendering?</li></ul></p>

LECTURE
3D Matrix Transformations, Normal Transformations, Scene Graphs

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 6.1-6.4, 6.5, 12.2</li><li><a href = "../Lectures/5_6_LinearAlgebraWeek/3DTransformations.pdf">3D Transformations Slides</a></li><li><a href = "../Materials/ggslac/viewers/SceneViewer.html">Scene Viewer</a></li></ul>
LECTURE
Scene Graphs Continued

<ul><li><a href = "../Materials/ggslac/viewers/SceneViewer.html">Scene Viewer</a></li></ul>
LECTURE
Shaders And GLSL

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> Chapter 18</li><li><a href = "../Lectures/Shaders1.pdf">Slides from today</li><li><a href = "https://github.com/Ursinus-CS476-F2019/Group1_Shaders/commit/2fa478d38f6f9af875cc33f901947a7db2b980cd">Code we wrote today</li><li><a href = "https://en.wikibooks.org/wiki/GLSL_Programming">GLSL Programming WikiBook</a></li><li><a href = "https://www.shadertoy.com/">shadertoy.com</a></li></ul>
LECTURE
Fractals, Texture Maps, Lambertian/Phong Illumination, Gouraud/Per-Fragment Shading

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 4.5, 8.2.4 - 8.2.6, 10.1, 10.2, 11.2, 11.3</li><li><a href = "https://en.wikipedia.org/wiki/L-system">Wikipedia Page on L-Systems</li><li><a href = "https://www.cs.uic.edu/~jbell/CourseNotes/ComputerGraphics/SpecialTopics.html">John Bell's Notes on fractals in computer graphics</li><li><a href = "https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL">Mozilla developer notes on WebGL Texture Mapping</li><li><a href = "https://webglfundamentals.org/webgl/lessons/webgl-3d-textures.html">WebGL Fundamentals Notes on Texture Maps And Mipmapping</a></li><li><a href = "http://www.cs.toronto.edu/~jacobson/phong-demo/">Alec Jacobson's WebGL Illumination/Shading Demo</a></li></ul>
LECTURE
GLSL Working Session


LECTURE
3D Perspectives, Ray Tracing Overview, Ray Instancing

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 4.1 - 4.3, 13.2
LECTURE
Continuing Ray Instancing, Global Illumination (Including Multiple Lights/Shadows)

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 4.7
LECTURE
Finish Global Illumination (Specular Reflections, Refraction/Transmission), Begin Object-First Viewing

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 4.8, 13.1, 7.1</li><li><a href = "https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluLookAt.xml">gluLookAt</a> documentation</li></ul>
LECTURE
Perspective Viewing, Hidden Surface Removal / Depth Sorting, Culling, Begin Cel (Toon) Shading

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> Chapter 7.2, 7.3, 8.2.2, 8.2.3, 8.4, 10.3</li><li><a href = "https://en.wikipedia.org/wiki/Cel_shading">Wikipedia Page on Cel Shading</a></li><li><a href = "https://www.cs.rpi.edu/~cutler/classes/advancedgraphics/S17/final_projects/amy_toshi.pdf">RPI Final Project on Ray Tracing Cel Shading</a></li></ul>
LECTURE
Finish Cel Shading Exercise / Bump Maps, Displacement Maps, Shadow Maps

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 11.4, 11.5, 11.7
SECTION
<a name = "shape">3D Shape Representations</a>
Now that we are comfortable rendering basic shapes, we will discuss data structures for representing more complicated custom shapes, which form the backbone of modern CAD and 3D modeling applications.  The first of these is the triangle mesh, which is a discrete approximation of a smooth 2D manifold surface consisting of a collection of triangles connected to each other at a common edge.  We will then discuss continuous representations, including subdivision surfaces and splines.  We will conclude this unit with implicit surfaces, which are volumetric descriptions of surfaces which allow for easy boolean operations and natural design of neat shapes such as water drops.  And as we will see, implicit surfaces lead to a very particular, smooth aesthetic via "metaballs" (not "m<b>ea</b>tballs"!).<p><b>Big Concepts And Questions:</b><ul><li>What is the difference between a discrete and continuous data structure for surfaces?</li><li>What are geometric properties of a triangle mesh, and what are topological properties of a triangle mesh?</li><li>What are the strengths and limitations of different shape representations?</li><li>How many metaballs does one need to design a human head?</li></ul></p>

LECTURE
Triangle Mesh Topology: Manifold, Boundary, Euler Characteristic

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 12.1.1 - 12.1.3
LECTURE
Mesh Orientation, Mesh Storage Requirements, Basic Mesh Data Structures

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 12.1.2 - 12.1.3</li><li><a href = "https://www.cc.gatech.edu/~jarek/courses/handouts/meshes.pdf">Additional Reading on Mesh Data Structures</a></li></ul>
LECTURE
The Half Edge Data Structure, Per-Vertex Normals, Truncation

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 12.1.4</li><li><a href = "http://kaba.hilvi.org/homepage/blog/halfedge/halfedge.htm">Kalle Rutanen's Half Edge Tutorial</a></li><li><a href = "http://www.bytehazard.com/articles/vertnorm.html">Per-vertex normals notes</a></li></ul>
LECTURE
Subdivision Surfaces (Guest lecture by <a href = "http://webpages.ursinus.edu/nscoville/">Dr. Nick Scoville</a>)

<a href = "https://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf">SIGGRAPH 2000 Subdivision Surface Notes</a>
LECTURE
Intermezzo: Video Game Design Q&A (Guest Lecture by <a href = "https://bigdata.duke.edu/people/steven-espinosa">Steven Espinosa</a>)

<ul><li><a href = "https://learn.unity.com/tutorial/your-first-game">Unity videos on your first game</a>, <a href = "https://www.gamedesigning.org/">https://www.gamedesigning.org/</a></li><li><a href = "https://www.youtube.com/watch?v=_JokM_fExpI">Bill Gates Talking About Windows 95 And The Original Doom</a></li></ul>
LECTURE
Curves And Splines, Bidirectional Reflectance Distribution Functions (BRDFs)

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> Chapter 15 (skim)
LECTURE
Implicit Surfaces/ Marching Cubes

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 2.5.3-2.5.5, 16.1.1-16.1.3</li><li><a href = "http://paulbourke.net/geometry/polygonise/">Paul Bourke Polygonize Notes</a></li><li> <a href = "https://github.com/Ursinus-CS476-F2019/ImplicitSurfaces">Code from class</a></li><li><a href = "https://www.youtube.com/watch?v=941z56i7QJE">Implicit human minus ellipsoid</a></li></ul>
SECTION
<a name = "animation">3D Animation</a>
In this section, we will cover some of the basics of 3D animation at a surface level.  This is an incredibly broad field, so we will focus primarily on the math underlying a subset of professional animation tools such as <a href = "https://www.blender.org/">Blender</a> and <a href = "https://www.autodesk.com/products/maya/overview">Maya</a>, rather than the tools themselves.  <p><b>Big Concepts And Questions:</b><ul><li>Explain why "inverse kinematics" are named as such</li></li><li>How does skinning work, and what are its shortcomings?</li><li>What is Gimbal Lock, and what animation scenarios does it adversely impact and how?</li></ul></p>

LECTURE
Animation Overview, The Animation Loop, Begin Collision Detection, Final Project Discussion

<a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 17.1
LECTURE
Collision Response, Convex Hulls/The Separating Axis Theorem, Begin Euler Angles


LECTURE
Finish Euler Angles, Rodrigues' Rotation Formula, Quaternions/SLERP 

<ul><li><a href = "../Materials/SlerpViz">Quaternion SLERP Visualization App</a></li><li><a href = "https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Proof_of_the_quaternion_rotation_identity">Wikipedia Derivation of Quaternion Axis/Angle Identity</a></li></ul>
LECTURE
Character Animation: Inverse Kinematics, MOCAP, Skinning

<ul><li><a href = "https://www.amazon.com/Fundamentals-Computer-Graphics-Peter-Shirley-dp-1568814690/dp/1568814690/ref=mt_hardcover?_encoding=UTF8&me=&qid=">S/M</a> 17.4</li><li><a href = "../Lectures/CharacterAnimation/FABRIK/forward.html">Forward Kinematics Demo</a></li><li><a href = "http://www.andreasaristidou.com/FABRIK.html">FABRIK Paper</a></li><li><a href = "../Lectures/CharacterAnimation/FABRIK">FABRIK Demo</a></li><li><a href = "https://twitter.com/i/status/1135929820603228161">FABRIK...application?</a></li><li><a href = "http://mocap.cs.cmu.edu/">CMU MOCAP Database</li><li><a href = "../Materials/MOCAPViz">Javascript MOCAP Visualizer</a></li></ul>
LECTURE
Course Wrap-Up / Raffle

<a href = "../Raffle/index.html">Raffle Prizes</a>
